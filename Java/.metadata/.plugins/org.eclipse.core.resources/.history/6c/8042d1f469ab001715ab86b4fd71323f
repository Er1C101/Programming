import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Random;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.Timer;

public class gameplay extends JPanel implements KeyListener, ActionListener {
	
	private int[] snakexlength = new int[750];
	private int[] snakeylength = new int[750];
	
	private boolean left = false;
	private boolean right = false;
	private boolean up = false;
	private boolean down = false;
	private boolean playing;
	private boolean playingSpace;
	
	private ImageIcon rightmouth;
	private ImageIcon leftmouth;
	private ImageIcon upmouth;
	private ImageIcon downmouth;
	private ImageIcon titleImage;
	private ImageIcon snakeimage;
	
	private boolean dead;
	private boolean borderGameplay = false;
	private boolean borderDead;
	private boolean ctrl = false;
	private boolean dispose = false;
	
	private int moves = 0;
	
	private int lengthofsnake = 3;
	
	private Timer timer;
	private int delay = 100;
	
	private int [] enemyxpos = {25, 50, 75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625, 650, 675, 700, 725, 750, 775, 800, 825, 850};
	private int [] enemyypos = {75, 100, 125, 150, 175, 200, 225, 250, 275, 300, 325, 350, 375, 400, 425, 450, 475, 500, 525, 550, 575, 600, 625};

	private ImageIcon enemyimage;
	
	private Random random = new Random();
	private int xpos = random.nextInt(34);
	private int ypos = random.nextInt(23);
	
	private int score = 0;
	private int highScore = 0;
	
	public gameplay() {
		addKeyListener(this);
		setFocusable(true);
		setFocusTraversalKeysEnabled(false);
		timer = new Timer(delay, this);
		timer.start();
	}
	
	public void playingSpace(Graphics g) {
		
		if(playingSpace) {
			g.setColor(Color.WHITE);
			g.setFont(new Font("arial", Font.BOLD, 50));
			g.drawString("You pressed \"Space\" while still playing:", 180, 300);
			g.drawString("Did you try and restart the game?", 225, 340);
			g.drawString("You can continue playing by pressing any of the arrow keys", 160, 380);
			g.drawString("CTRL + Space to restart in the middle of a game", 180, 420);
		}
		
		else {
			g.dispose();
		}
		
	}
	
	public void deadGraphic(Graphics g) {
		g.setColor(Color.WHITE);
		g.setFont(new Font("arial", Font.BOLD, 50));
		g.drawString("Game Over", 300, 300);
		
		g.setFont(new Font("arial", Font.BOLD, 20));
		g.drawString("Press \"Space\" To Restart And \"Enter\" To Toggle Borders", 160, 340);
		
		if(borderGameplay) {
			g.drawString("Borders ON", 370, 380);
		} 
		else {
			g.drawString("Borders OFF", 365, 380);
		}
	}
	
	public void dead() {
		right = false;
		left = false;
		up = false;
		down = false;
		dead = true;
		score = 0;
		moves = 0;
	}
	
	public void paint (Graphics g) {
		
		if(moves == 0) {
			snakexlength[2] = 50;
			snakexlength[1] = 75;
			snakexlength[0] = 100;
			
			snakeylength[2] = 100;
			snakeylength[1] = 100;
			snakeylength[0] = 100;
		}
		
		if(moves >= 1) {
			playing = true;
		}
		
		// Draw title image border
		g.setColor(Color.WHITE);
		g.drawRect(24, 10, 851, 55);
		
		// Draw the title image
		titleImage = new ImageIcon(getClass().getResource("/assets/snaketitle.jpg"));
		titleImage.paintIcon(this, g, 25, 11);
		
		// Draw the border for gameplay
		g.setColor(Color.WHITE);
		g.drawRect(24, 74, 851, 577);
		
		// Draw background for the gameplay
		g.setColor(Color.BLACK);
		g.fillRect(25, 75, 850, 575);
		
		// Draw score
		g.setColor(Color.WHITE);
		g.setFont(new Font("arial", Font.PLAIN, 14));
		g.drawString("Score: " + score, 780, 30);
		
		// Draw  high score
		g.drawString("High Score: " + highScore, 780, 50);
		
		rightmouth = new ImageIcon(getClass().getResource("/assets/rightmouth.png"));
		rightmouth.paintIcon(this, g, snakexlength[0], snakeylength[0]);
		
		for(int i = 0; i < lengthofsnake; i++) {
			
			if(i == 0 && right) {
				rightmouth = new ImageIcon(getClass().getResource("/assets/rightmouth.png"));
				rightmouth.paintIcon(this, g, snakexlength[i], snakeylength[i]);
			}
			
			if(i == 0 && left) {
				leftmouth = new ImageIcon(getClass().getResource("/assets/leftmouth.png"));
				leftmouth.paintIcon(this, g, snakexlength[i], snakeylength[i]);
			}
			
			if(i == 0 && up) {
				upmouth = new ImageIcon(getClass().getResource("/assets/upmouth.png"));
				upmouth.paintIcon(this, g, snakexlength[i], snakeylength[i]);
			}
			
			if(i == 0 && down) {
				downmouth = new ImageIcon(getClass().getResource("/assets/downmouth.png"));
				downmouth.paintIcon(this, g, snakexlength[i], snakeylength[i]);
			}
			
			if(i != 0) {
				snakeimage = new ImageIcon(getClass().getResource("/assets/snakeimage.png"));
				snakeimage.paintIcon(this, g, snakexlength[i], snakeylength[i]);
			}
			
		}
		
		enemyimage = new ImageIcon(getClass().getResource("/assets/enemy.png"));
		
		if(enemyxpos[xpos] == snakexlength[0] && enemyypos[ypos] == snakeylength[0]) {
			score++;
			lengthofsnake++;
			xpos = random.nextInt(34);
			ypos = random.nextInt(23);
		}
		
		enemyimage.paintIcon(this, g, enemyxpos[xpos], enemyypos[ypos]);
		
		for(int i = 1; i < lengthofsnake; i++) {
			
			if(borderDead) {
				if(score > highScore) {
					highScore = score;
				}
				playing = false;
				dead();
				deadGraphic(g);
			}
			
			if(playingSpace) {
				System.out.println("playingSpace = activated");
				left = false;
				right = false;
				up = false;
				down = false;
				playingSpace(g);
				playingSpace = false;
				
			}
			
			else if(dispose) {
				System.out.println("dispose = activated");
				g.dispose();
			}
			
			if(snakexlength[i] == snakexlength[0] && snakeylength[i] == snakeylength[0]) {
				if(score > highScore) {
					highScore = score;
				}
				playing = false;
				dead();
				deadGraphic(g);
			}
		}
		g.dispose();
	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		timer.start();
		
		if(right || left || down || up) {
			dispose = true;
		}
		
		if(right) {
			
			for(int i = lengthofsnake - 1; i >= 0; i--) {
				snakeylength[i+1] = snakeylength[i];
			}
			
			for(int i = lengthofsnake; i >= 0; i--) {
				
				if(i == 0) {
					snakexlength[i] = snakexlength[i] + 25;
				}
				
				else {
					snakexlength[i] = snakexlength[i-1];
				}
			
				if(!borderGameplay) {
					if(snakexlength[i] > 850) {
						snakexlength[i] = 25;
					}
				}
				
				else {
					if(snakexlength[i] >= 850) {
						borderDead = true;
					}
				}
			}
			
			repaint();
		}
		
		if(left) {
			
			for(int i = lengthofsnake - 1; i >= 0; i--) {
				snakeylength[i+1] = snakeylength[i];
			}
			
			for(int i = lengthofsnake; i >= 0; i--) {
				
				if(i == 0) {
					snakexlength[i] = snakexlength[i] - 25;
				}
				
				else {
					snakexlength[i] = snakexlength[i-1];
				}
				
				if(!borderGameplay) {
					if(snakexlength[i] < 25) {
						snakexlength[i] = 850;
					}
				}
				
				else {
					if(snakexlength[i] <= 25) {
						borderDead = true;
					}
				}
			}
			
			repaint();
		}
		
		if(down) {
			
			for(int i = lengthofsnake - 1; i >= 0; i--) {
				snakexlength[i+1] = snakexlength[i];
			}
			
			for(int i = lengthofsnake; i >= 0; i--) {
				
				if(i == 0) {
					snakeylength[i] = snakeylength[i] + 25;
				}
				
				else {
					snakeylength[i] = snakeylength[i-1];
				}
				
				if(!borderGameplay) {
					if(snakeylength[i] > 625) {
						snakeylength[i] = 75;
					}
				}
				
				else {
					if(snakeylength[i] >= 625) {
						borderDead = true;
					}
				}
			}
			
			repaint();
		}
		
		if(up) {

			for(int i = lengthofsnake - 1; i >= 0; i--) {
				snakexlength[i+1] = snakexlength[i];
			}
			
			for(int i = lengthofsnake; i >= 0; i--) {
				
				if(i == 0) {
					snakeylength[i] = snakeylength[i] - 25;
				}
				
				else {
					snakeylength[i] = snakeylength[i-1];
				}
				
				if(!borderGameplay) {
					if(snakeylength[i] < 75) {
						snakeylength[i] = 625;
					}
				}
				
				else {
					if(snakeylength[i] <= 75) {
						borderDead = true;
					}
				}
			}
			
			repaint();
		}
		
	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyCode() == KeyEvent.VK_CONTROL) {
			ctrl = true;
		}
		
		if(e.getKeyCode() == KeyEvent.VK_SPACE) {
			
			if(!playing) {
				dead = false;
				moves = 0;
				score = 0;
				lengthofsnake = 3;
				borderDead = false;
				repaint();
			} 
			
			else if(ctrl) {
				dead = false;
				moves = 0;
				score = 0;
				lengthofsnake = 3;
				borderDead = false;
				repaint();
			}
			
			else {
				playingSpace = true;	
			}
		}
		
		if(e.getKeyCode() == KeyEvent.VK_RIGHT) {
			if(!dead) {
			moves++;
			right = true;
			
			if(!left) {
				right = true;
			}
			else {
				right = false;
				left = true;
			}
			
			up = false;
			down = false;
			}
		}
		
		if(e.getKeyCode() == KeyEvent.VK_LEFT) {
			if(!dead) {
			moves++;
			left = true;
			
			if(!right) {
				left = true;
			}
			else {
				right = true;
				left = false;
			}
			
			up = false;
			down = false;
			}
		}
		
		if(e.getKeyCode() == KeyEvent.VK_UP) {
			if(!dead) {
			moves++;
			up = true;
			
			if(!down) {
				up = true;
			}
			else {
				up = false;
				down = true;
			}
			
			right = false;
			left = false;
			}
		}
		
		if(e.getKeyCode() == KeyEvent.VK_DOWN) {
			if(!dead) {
			moves++;
			down = true;
			
			if(!up) {
				down = true;
			}
			else {
				down = false;
				up = true;
			}
			
			right = false;
			left = false;
			}
		}
		
		if(e.getKeyCode() == KeyEvent.VK_ENTER) {
			if(!playing) {
				if(borderGameplay) {
					borderGameplay = false;
				}
				
				else {
					borderGameplay = true;
				}
			}
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		if(e.getKeyCode() == KeyEvent.VK_CONTROL) {
			ctrl = false;
		}
		
	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub
		
	}
}
